consumes:
- application/json
definitions:
  EmployeeStatus:
    description: This model represents the employee status for this application.
    title: Employee Status
    type: string
    x-go-package: github.com/MarkoLuna/GoEmployeeCrud/pkg/constants
  employeeData:
    description: This model represents the employee information.
    properties:
      Id:
        description: The id for this employee
        example: 6204037c-30e6-408b-8aaa-dd8219860b4b
        type: string
      dateOfBirth:
        description: The date of birth for employee
        example: "1994-04-25T12:00:00Z"
        format: date-time
        type: string
        x-go-name: DateOfBirth
      dateOfEmployment:
        description: The date of employment for employee
        example: "1994-04-25T12:00:00Z"
        format: date-time
        type: string
        x-go-name: DateOfEmployment
      firstName:
        description: The firstname for employee
        minLength: 1
        type: string
        x-go-name: FirstName
      lastName:
        description: The lastname for employee
        minLength: 1
        type: string
        x-go-name: LastName
      secondLastName:
        description: The second last name for employee
        minLength: 1
        type: string
        x-go-name: SecondLastName
      status:
        $ref: '#/definitions/EmployeeStatus'
    required:
    - firstName
    - lastName
    - secondLastName
    - dateOfBirth
    - dateOfEmployment
    - status
    title: Employee
    type: object
    x-go-name: Employee
    x-go-package: github.com/MarkoLuna/GoEmployeeCrud/pkg/models
host: localhost:8080
info:
  contact:
    email: josemarcosluna9@gmail.com
    name: Marcos Luna
  description: |-
    Employee Crud RESTful APIs in golang.
    API for create, read, update and delete employees.
  title: Employee API.
  version: 1.0.0
paths:
  /api/employee/:
    get:
      consumes:
      - application/json
      operationId: getEmployees
      produces:
      - application/json
      responses:
        "200":
          description: Employee information
          schema:
            $ref: '#/definitions/employeeData'
      summary: Get Employee list.
    post:
      consumes:
      - application/json
      operationId: createEmployee
      parameters:
      - description: The firstname for employee
        example: Marcos
        in: body
        name: firstName
        required: true
        schema:
          type: string
        x-go-name: FirstName
      - description: The lastname for employee
        example: Luna
        in: body
        name: lastName
        required: true
        schema:
          type: string
        x-go-name: LastName
      - description: The second last name for employee
        example: Valdez
        in: body
        name: secondLastName
        required: true
        schema:
          type: string
        x-go-name: SecondLastName
      - description: The date of birth for employee
        example: "1994-04-25T12:00:00Z"
        in: body
        name: dateOfBirth
        required: true
        schema:
          format: date-time
          type: string
        x-go-name: DateOfBirth
      - description: The date of employment for employee
        example: "1994-04-25T12:00:00Z"
        in: body
        name: dateOfEmployment
        required: true
        schema:
          format: date-time
          type: string
        x-go-name: DateOfEmployment
      - description: The status for employee
        example: Active, Inactive
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/EmployeeStatus'
        x-go-name: Status
      produces:
      - application/json
      responses:
        "201":
          description: Employee created successfully
          schema:
            $ref: '#/definitions/employeeData'
      summary: Create a new Employee.
  /api/employee/{EmployeeId}:
    delete:
      consumes:
      - application/json
      operationId: deleteEmployeeById
      parameters:
      - description: The id for the employee
        example: 6204037c-30e6-408b-8aaa-dd8219860b4b
        in: path
        name: EmployeeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/empty'
          description: Employee deleted successfully
        "404":
          $ref: '#/responses/empty'
          description: Employee not found
      summary: Delete Employee by Id.
    get:
      consumes:
      - application/json
      operationId: getEmployeeById
      parameters:
      - description: The id for the employee
        example: 6204037c-30e6-408b-8aaa-dd8219860b4b
        in: path
        name: EmployeeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Employee information
          schema:
            $ref: '#/definitions/employeeData'
        "404":
          $ref: '#/responses/empty'
          description: Employee not found
      summary: Get Employe by Id.
    put:
      consumes:
      - application/json
      operationId: updateEmployeeById
      parameters:
      - description: The firstname for employee
        example: Marcos
        in: body
        name: firstName
        required: true
        schema:
          type: string
        x-go-name: FirstName
      - description: The lastname for employee
        example: Luna
        in: body
        name: lastName
        required: true
        schema:
          type: string
        x-go-name: LastName
      - description: The second last name for employee
        example: Valdez
        in: body
        name: secondLastName
        required: true
        schema:
          type: string
        x-go-name: SecondLastName
      - description: The date of birth for employee
        example: "1994-04-25T12:00:00Z"
        in: body
        name: dateOfBirth
        required: true
        schema:
          format: date-time
          type: string
        x-go-name: DateOfBirth
      - description: The date of employment for employee
        example: "1994-04-25T12:00:00Z"
        in: body
        name: dateOfEmployment
        required: true
        schema:
          format: date-time
          type: string
        x-go-name: DateOfEmployment
      - description: The status for employee
        example: Active, Inactive
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/EmployeeStatus'
        x-go-name: Status
      - description: The id for the employee
        example: 6204037c-30e6-408b-8aaa-dd8219860b4b
        in: path
        name: EmployeeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Employee updated successfully
          schema:
            $ref: '#/definitions/employeeData'
      summary: Update Employe by Id.
  /healthcheck/:
    get:
      operationId: healthcheck
      produces:
      - text/plain
      responses:
        "200":
          $ref: '#/responses/empty'
          description: Service is up
      summary: Check health of the service.
produces:
- application/json
schemes:
- http
- https
security:
- api_key: []
securityDefinitions:
  api_key:
    in: header
    name: KEY
    type: apiKey
swagger: "2.0"
